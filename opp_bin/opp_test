#!/usr/bin/env python
#
# opp_test: regression testing tool for OMNeT++/OMNEST
#
# Copyright (C) 2017 OpenSim Ltd.
# Author: Zoltan Bojthe
#

from __future__ import print_function
import argparse
import os
import re
import subprocess
import sys

progname = 'opp_test.py'

def fail(msg):
    print(progname + ": Error: {}".format(msg), file=sys.stderr)
    sys.exit(1)


# from net: do not change order of attributes
class OppFormatter(argparse.RawDescriptionHelpFormatter):
    # use defined argument order to display usage
    def _format_usage(self, usage, actions, groups, prefix):
        if prefix is None:
            prefix = 'usage: '

        # if usage is specified, use that
        if usage is not None:
            usage = usage % dict(prog=self._prog)

        # if no optionals or positionals are available, usage is just prog
        elif usage is None and not actions:
            usage = '%(prog)s' % dict(prog=self._prog)
        elif usage is None:
            prog = '%(prog)s' % dict(prog=self._prog)
            # build full usage string
            action_usage = self._format_actions_usage(actions, groups) # NEW
            usage = ' '.join([s for s in [prog, action_usage] if s])
            # omit the long line wrapping code
        # prefix with 'usage:'
        return '%s%s\n\n' % (prefix, usage)


class OppTest:
    progname = 'opp_test.py'
    # .test file possible entries. legend: 1=once, v=has value, b=has body, f=value is filename
    entries = {
        'description'        : '1b',

        'activity'           : '1b',
        'includes'           : '1b',
        'global'             : '1b',
        'module'             : '1vb',

        'file'               : 'vbf',
        'inifile'            : 'vbf',
        'network'            : '1v',

        'subst'              : 'v',

        'contains'           : 'vbf',
        'not-contains'       : 'vbf',
        'contains-regex'     : 'vbf',
        'not-contains-regex' : 'vbf',

        'file-exists'        : 'vf',
        'file-not-exists'    : 'vf',

        'env'                : 'v',
        'testprog'           : '1v',
        'extraargs'          : '1v',
        'exitcode'           : '1v',
        'ignore-exitcode'    : '1v',

        'prerun-command'     : 'v',
        'postrun-command'    : 'v'
    }

    filenames = ()

    PackageNEDTemplate = ''
    ModuleNEDTemplate = ''
    ActivityCPPTemplate = ''
    ModuleCPPTemplate = ''
    INITemplate = ''
    taillength = 800


    def define_templates(self):
        self.PackageNEDTemplate = '''
@namespace(@TESTNAME@);
'''

        self.ModuleNEDTemplate = '''
simple @MODULE@
{
    @isNetwork(true);
}
'''

        self.ActivityCPPTemplate = '''
#include <omnetpp.h>

@INCLUDES@

using namespace omnetpp;

namespace @TESTNAME@ {

@GLOBAL@

class @MODULE@ : public cSimpleModule
{
    public:
        @MODULE@() : cSimpleModule(65536) {}
        virtual void activity();
};

Define_Module(@MODULE@);

void @MODULE@::activity()
{
@ACTIVITY@
}

}; //namespace
'''

        self.ModuleCPPTemplate = '''
#include <omnetpp.h>

@INCLUDES@

using namespace omnetpp;

namespace @TESTNAME@ {

@MODULE_SRC@

}; //namespace
'''

        self.INITemplate = '''
[General]
network = @NETWORKNAME@
cmdenv-express-mode = false
cmdenv-log-prefix = ""
'''

    def lprint(self, level, *args, **kwargs):
        if level <= self.args.verbose:
            print(*args, **kwargs)

    def writefile(self, filename, body):
        # write file but preserve file date if it already existed with identical contents
        # (to speed up make process)

        skipwrite = False
        if (os.path.exists(filename)):
            try:
                infile = open(filename, 'r')
                oldbody = infile.read()
                infile.close()
            except (IOError, OSError) as e:
                fail("Cannot read file `{}': ({})".format(filename, e))

            if (body == oldbody):   #FIXME check it on Windows/Mac
                skipwrite = True

        if skipwrite:
            self.lprint(2, "  file `"+filename+"' already exists with identical content")
        else:
            self.lprint(2, "  writing `"+filename+"'")
            directory = os.path.dirname(filename)
            if not os.path.exists(directory):
                os.makedirs(directory)
            try:
                file = open(filename, 'w')
                file.write(body)
                file.close()
            except (IOError, OSError) as e:
                fail("I/O error while writing the `{}' file: ({})".format(filename, e))


    # args: command, work-directory, stdout-file, stderr-file
    # return: exit code, or -1 if program crashed
    def exec_program(self, cmd, wdir, outfile, errfile):
#        cmd = re.sub(r"'", "'\\''", cmd) # s|'|'\\''|g;  # quote due to potential nested apostrophes
        do = [ self.args.shell , "-c", "cd "+wdir+" && "+cmd]
        self.lprint(2, "  running: "+" ".join(do))
        myout = open(os.path.join(wdir, outfile), "w")
        myerr = open(os.path.join(wdir, errfile), "w")
        status = subprocess.call(do, stdout=myout, stderr=myerr)

        # convert from Python convention to bash or windows convention
        if status < 0:
            # https://docs.python.org/3.7/library/subprocess.html#subprocess.Popen.returncode
            # "A negative value -N indicates that the child was terminated by signal N (POSIX only)."
            if os.name == 'posix' or os.name == 'mac': # 'mac' is not used on python3
                # https://stackoverflow.com/a/13410845/635587
                # "The status value reported by bash will be 128 + <signum> for processes that terminate due to signal <signum>"
                status = 128 + -status
            elif os.name == 'nt':
                # https://msdn.microsoft.com/en-us/library/xdkz3x12.aspx
                # "By default, signal terminates the calling program with exit code 3, regardless of the value of sig."
                status = 3

        myout.close()
        myerr.close()
        self.lprint(2, "  returned status = {}".format(status))
        return status;


    def parse_testfile(self, testfilename):
        self.bodies = {}
        self.values = {}
        self.count = {}

        self.lprint(2, "  parsing `{}' file\n".format(testfilename))

        # assign a test name (filename without extension, special chars removed)
        testname = os.path.splitext(os.path.basename(testfilename))[0]
        testname = re.sub(r'[^A-Za-z0-9_]', '_', testname)
        self.lprint(2, "  testname for `{}' is {}\n".format(testfilename, testname))
        self.testname = testname

        # read test file
        try:
            testfile = open(testfilename, 'r')
        except (IOError, OSError) as e:
            fail("can't open `{}' file: {}".format(testfilename, e))

        body = ''
        key_index = ''
        for line in testfile:
            line = line.rstrip("\r\n").rstrip(" \t")
            if (line[:2] == '%#'):
                # ignore comments
                pass
            elif (line[:2] == '%%'):
                # '%%' replaced to '%', added to body
                body += line[1:] + "\n"
            elif (line[:1] =='%'):
                if re.match(r'^\s*$', body):
                    body = ''
                self.bodies[key_index] = body
                body = ''

                m = re.match(r"^%([^:]*):?(.*?)$", line)
                if (not m):
                    fail("illegal key line: `"+line+"'")
                key = m.group(1)
                value = m.group(2)
                key = key.strip()
                value = value.strip()

                if key in self.count:
                    self.count[key] += 1
                else:
                    self.count[key] = 1
                key_index = key +'(' + str(self.count[key]) + ')'
                self.values[key_index] = value
            else:
                body += line + "\n"

        if re.match(r'^\s*$', body):
            body = ''
        self.bodies[key_index] = body
        testfile.close()

        # check entries
        for key_index in self.values:
            m = re.match(r'^(.*)\((\d+)\)$', key_index)
            if (not m):
                fail("illegal key in values: `"+key_index+"'")
            key = m.group(1)
            index = m.group(2)
            if (key not in self.entries):
                fail("error in test file `{}': invalid entry `{}'\n".format(testfilename, key))
            desc = self.entries[key]
            if (('1' in desc) and int(index) > 1):
                fail("error in test file `{}': entry `%{}' should occur only once.\n".format(testfilename, key))
            if (('v' in desc) and self.values[key_index] == ""):
                fail("error in test file `{}': entry `%{}' expects value after ':'\n".format(testfilename, key))
            if (('v' not in desc) and self.values[key_index] != ""):
                fail("error in test file `{}': entry `%{}' expects nothing after ':' ---{}---\n".format(testfilename, key, self.values[key_index]))
            if (('b' in desc) and self.bodies[key_index] == ""):
                if ('v' in desc):
                    fail("error in test file `{}': entry `%{}: {}' expects body\n".format(testfilename, key, self.values[key_index]))
                else:
                    fail("error in test file `{}': entry `%{}' expects body\n".format(testfilename, key))
            if (('b' not in desc) and self.bodies[key_index] != ""):
                fail("error in test file `{}': entry `%{}' expects no body: >>>{}<<<\n".format(testfilename, key, self.bodies[key_index]))

        # additional manual tests
        if (('activity(1)' in self.bodies) and ('module(1)' in self.bodies)):
            fail("error in test file `"+testfilename+"': %activity excludes %module\n")
        if (('ignore-exitcode(1)' in self.values) and ('exitcode(1)' in self.values)):
            fail("error in test file `"+testfilename+"': %ignore-exitcode excludes %exitcode\n")

        # fake a _defaults.ini after the other inifiles
        key = "inifile"
        if key in self.count:
            self.count[key] += 1
        else:
            self.count[key] = 1
        key_index = key + '(' + str(self.count[key]) + ')'
        self.values[key_index] = "_defaults.ini"
        self.bodies[key_index] = self.INITemplate

        # substitute TESTNAME and other macros, kill comments
        for key in self.values:
            self.bodies[key] = re.sub(r'^%#.*?$', '', self.bodies[key], flags=re.MULTILINE)      # kill comments
            self.values[key] = self.values[key].replace('@TESTNAME@', testname)
            self.bodies[key] = self.bodies[key].replace('@TESTNAME@', testname)

        # added some empty key to bodies if missing
        for key in ('global(1)', 'includes(1)'):
            if key not in self.values:
                self.values[key] = ''
                self.bodies[key] = ''


    def testcase_generatesources(self, testfilename):
        self.parse_testfile(testfilename)

        self.lprint(2, "  generating files for `"+testfilename+"':")

        # generate "package.ned"
        ned = self.PackageNEDTemplate.replace('@TESTNAME@', self.testname)
        nedfname = os.path.join(self.args.workdir, self.testname, "package.ned")
        self.writefile(nedfname, ned)

        # let the user specify the network explicitly
        networkname = (self.values['network(1)'] if ('network(1)' in self.values and self.values['network(1)'] != "") else "Test")

        # 'activity' template
        if ('activity(1)' in self.bodies):
            module = networkname
            activity = self.bodies['activity(1)']
            includescode = self.bodies['includes(1)']
            globalcode = self.bodies['global(1)']

            # generate NED
            ned = self.ModuleNEDTemplate
            ned = ned.replace("@TESTNAME@", self.testname)
            ned = ned.replace("@MODULE@", module)
            nedfname = os.path.join(self.args.workdir,self.testname,"test.ned")
            self.writefile(nedfname, ned)

            # generate C++
            cpp = self.ActivityCPPTemplate
            cpp = cpp.replace("@TESTNAME@", self.testname)
            cpp = cpp.replace("@MODULE@", module)
            cpp = cpp.replace("@INCLUDES@", includescode)
            cpp = cpp.replace("@GLOBAL@", globalcode)
            cpp = cpp.replace("@ACTIVITY@", activity)
            cppfname = os.path.join(self.args.workdir, self.testname, "test.cc")
            self.writefile(cppfname, cpp)

        # 'module' template
        if ('module(1)' in self.bodies):
            module = self.values['module(1)']
            module_src = self.bodies['module(1)']
            networkname = module
            includescode = self.bodies['includes(1)']
            globalcode = self.bodies['global(1)']

            # generate NED
            ned = self.ModuleNEDTemplate
            ned = ned.replace("@TESTNAME@", self.testname)
            ned = ned.replace("@MODULE@", module)
            nedfname = os.path.join(self.args.workdir, self.testname, "test.ned")
            self.writefile(nedfname, ned)

            # generate C++
            cpp = self.ModuleCPPTemplate
            cpp = cpp.replace("@TESTNAME@", self.testname)
            cpp = cpp.replace("@INCLUDES@", includescode)
            cpp = cpp.replace("@MODULE@", module)
            cpp = cpp.replace("@MODULE_SRC@", module_src)
            cppfname = os.path.join(self.args.workdir, self.testname, "test.cc")
            self.writefile(cppfname, cpp)

        # ini files
        inifilekeys = []
        for key  in self.values:
            if (re.match(r"^inifile\([0-9]+\)", key)):
                inifilekeys.append(key)

        for key in inifilekeys:
            inifname = os.path.join(self.args.workdir, self.testname, self.values[key])
            inifile = self.bodies[key]
            inifile = inifile.replace('@TESTNAME@', self.testname)
            inifile = inifile.replace('@NETWORKNAME@', networkname)
            self.writefile(inifname, inifile)

        # source files (export them after the templated files,
        # so that user can overwrite them if needed)
        for key in self.values:
            if (re.match(r"^file\([0-9]+\)", key)):
                # write out file
                fname = os.path.join(self.args.workdir, self.testname, self.values[key])
                self.writefile(fname, self.bodies[key])

#
#  command line parser for options and files.
#
    def createParser(self):
        epilog = '''
Usage in nutshell:
   1. create tests as *.test files
   2. run "opp_test gen" to generate the source files from *.test
   3. create a makefile (opp_makemake) and build the test program
   4. run "opp_test run" to execute the tests

All files will be created in the work directory.

Supported .test file entry types:
(legend: 1=may occur once, v=value expected, b=has body, f=value is filename)
'''
        for k in sorted(self.entries):
                epilog = epilog + '   %%%-20s (%s)\n' % (k, self.entries[k])

        self.parser = argparse.ArgumentParser(description='''opp_test - OMNeT++/OMNEST Regression Test Tool, (C) 2002-2017 OpenSim Ltd.
        See the license for distribution terms and warranty disclaimer.

        ''',
                epilog=epilog,
                formatter_class=OppFormatter)
        #subparsers = parser.add_subparsers(help='sub-command help', dest='mode')
        #parser_gen = subparsers.add_parser('gen', help='generate (export) source files from test case files')
        #parser_run = subparsers.add_parser('run', help='run test (expects pre-built test executable)')
        #parser_check = subparsers.add_parser('check', help='re-evaluate result files generated by previous test run')
        self.parser.add_argument('mode', action='store',
                            choices=['gen', 'run', 'check'],
                            help='gen|run|check',
                            )
        self.parser.add_argument('-v', '--verbose', action='count', dest='verbose',
                            default=False,
                            help='verbose',
                            )
        self.parser.add_argument('-d', '--debug', action='store_const', const=2, dest='verbose',
                            default=False,
                            help='very verbose (debug), alias for -vv',
                            )
        self.parser.add_argument('-w', '--workingdir', action='store', dest='workdir',
                            default=os.path.join('.','work'),
                            help='working directory (defaults to "%(default)s")',
                            )
        self.parser.add_argument('-s', '--shell', action='store',
                            default='sh',
                            help='shell to use to run test program',
                            )
        self.parser.add_argument('-p', '--program', action='store', dest='testprogram',
                            default='',
                            help='name of test program (defaults to name of work directory)',
                            )
        self.parser.add_argument('filenames', nargs='+', metavar='TESTFILE',
                            )
        self.parser.add_argument('-a', '--args', nargs=argparse.REMAINDER, dest='extraargs',
                            #FIXME hasznaljuk-e a REMAINDERT? igy beszed mindent a '-a' utan '--'-ig, utana nem lehet egyeb argumentum, csak a filenames
                            help='extra command-line arguments for the test program. You may need to use quotes: opp_test -a "-f extrasettings.ini"'
                            )

    def print_tail(self, label, fname):
        try:
            f = open(fname, 'r')
        except (IOError, OSError) as e:
            print("cannot open {} file: {}".format(fname, e))
            return;

        f.seek(0, os.SEEK_END)
        if (f.tell() > self.taillength):
            f.seek(f.tell()-self.taillength, os.SEEK_SET) # note: SEEK_END would throw 'io.UnsupportedOperation: can't do nonzero end-relative seeks' unless file is opened as binary
            istail = True
            f.readline()  # skip incomplete line
        else:
            f.seek(0, os.SEEK_SET)
            istail = False

        txt = ''
        for line in f:
            txt += line
        f.close()

        if txt != '':
            if istail:
                print("tail of "+label+":")
            else:
                print( label+":")
            print(">>>>"+txt+"<<<<")

    def testunresolved(self, testname, reason):
        self.num_unresolved += 1
        self.unresolved_tests.append(testname)
        self.result[testname] = 'UNRESOLVED'
        self.reason[testname] = reason
        print("*** "+testname+": UNRESOLVED ("+reason+")")

    def testfailed(self, testname, reason):
        self.num_fail += 1
        self.failed_tests.append(testname)
        self.result[testname] = 'FAIL'
        self.reason[testname] = reason
        print("*** "+testname+": FAIL ("+reason+")")

    def testpassed(self, testname):
        self.num_pass += 1
        self.result[testname] = 'PASS'
        self.reason[testname] = ''
        print("*** "+testname+": PASS")

    def saveOriginalEnv(self):
        self.savedEnv = {}
        for envkey in os.environ:
            self.savedEnv[envkey] = os.environ[envkey]

    def restoreOriginalEnv(self):
        for envkey in list(os.environ.keys()):
            if envkey not in self.savedEnv:
                del os.environ[envkey]
        for envkey,envvar in self.savedEnv.items():
            os.environ[envkey] = envvar

    def testcase_run(self, testfilename):
        self.parse_testfile(testfilename)

        outfname = "test.out"
        errfname = "test.err"

        nedPath = os.environ['NEDPATH'] if 'NEDPATH' in os.environ else ''
        runscript = "#! /bin/sh\n#\n# Convenience script to run the simulation manually\n#\n\nexport NEDPATH=\""+nedPath+"\"\n"

        if (self.args.mode == 'run'):
            # delete temp files before running the test case
            for key, value in self.values.items():
                if (key.startswith('contains')):  # any form of "contains-..."
                    # read file
                    if (value == 'stdout'):
                        infname = outfname
                    elif (value == 'stderr'):
                        infname = errfname
                    else:
                        infname = os.path.join(self.testname, value)
                    infPath = os.path.join(self.args.workdir, infname)
                    isgenerated = not infname.endswith(('.cc', '.h', '.msg', '.ned', '.ini'))
                    if (isgenerated and os.path.exists(infPath)):
                        self.lprint(2, "  deleting old copy of file `" + infname + "'")
                        os.remove(infPath)

        # restore original env vars
        self.restoreOriginalEnv()

        # set environment variables
        for key, value in self.values.items():
            if key.startswith('env('):
                tmp = value
                m = re.match(r"(.*?)=(.*)", value)
                if not m:
                    fail("illegal value in %env: `"+value+"'")
                envkey = m.group(1)
                envvalue = m.group(2)
                os.environ[envkey] = envvalue
                runscript += "export " + envkey + "=\""+envvalue+"\"\n";
                self.lprint(2, "  setting environment variable `{}' = `{}'".format(envkey, envvalue))

        # execute pre-run commands
        if (self.args.mode == 'run'):
            for key,value in sorted(self.values.items()):
                if (key.startswith('prerun-command(')):
                    # execute file
                    runscript += value + ">" + key + ".out 2>" + key + ".err\n"
                    exitcode = self.exec_program(value, os.path.join(self.args.workdir, self.testname), key+".out", key+".err");
                    if (exitcode != 0):
                        self.testunresolved(testfilename, "pre-run command \""+value+"\" returned nonzero exit code: "+str(exitcode))
                        return

        # run the program
        if (self.args.mode == 'run'):
            myargs = self.values['extraargs(1)'] if 'extraargs(1)' in self.values else ''

            inifilenames = ''
            for key,value in sorted(self.values.items()):
                if (key.startswith('inifile(')):
                    inifilenames += " "+value

            if inifilenames == '':
                fail('Not found any inifile key')   # at least the implicit _defaults.ini should be there

            if 'testprog(1)' in self.values:
                cmdline = self.values['testprog(1)'] + " " +myargs+" "+(" ".join(self.args.extraargs))
                runscript += cmdline + ' "$@"\n'
                exitcode = self.exec_program(cmdline, os.path.join(self.args.workdir,self.testname), outfname, errfname)
            else:
                testprogwithpath = os.path.join(self.args.workdir, self.args.testprogram)
                if (not os.path.exists(testprogwithpath) and not os.path.exists(testprogwithpath+".exe")):
                    fail("test program '" + testprogwithpath + "' not found\n")
                if (not os.access(testprogwithpath, os.X_OK) and not os.access(testprogwithpath+".exe", os.X_OK)):
                    fail("test program '" + testprogwithpath + "' is not executable\n")
                cmdline = os.path.join("..",self.args.testprogram)+" -u Cmdenv "+myargs+" "+(" ".join(self.args.extraargs))+" "+inifilenames
                runscript += cmdline + ' "$@"\n'
                exitcode = self.exec_program(cmdline, os.path.join(self.args.workdir,self.testname), outfname, errfname)

            if (exitcode == 127):
                self.testunresolved(testfilename, "could not execute test program")
                return;

        # if stdout contains "#UNRESOLVED" or "#UNRESOLVED: some explanation", count this test as unresolved;
        # must be done BEFORE checking the exit code
        with open(os.path.join(self.args.workdir, self.testname, outfname), 'r') as f:
            for line in f:
                m=re.match(r'^#UNRESOLVED:? *(.*)', line)
                if (m):
                    self.testunresolved(testfilename, "test program says UNRESOLVED: {}".format(m.group(1)))
                    return

        # check exitcode against expected one
        if (self.args.mode == 'run'):
            exitCodeFail = True
            insteadOf = ''

            if ('ignore-exitcode(1)' in self.values):
                if (exitcode != 0):
                    self.lprint(2, "  ignoring exitcode {}".format(exitcode))
                exitCodeFail = False
            elif ('exitcode(1)' in self.values):
                if str(exitcode) in self.values['exitcode(1)'].split(' '):
                    self.lprint(2, "  exitcode ok ({})".format(exitcode))
                    exitCodeFail = False
                else:
                    insteadOf = " instead of " + self.values['exitcode(1)']
            elif (exitcode == 0):
                exitCodeFail = False
            else:
                pass

            if exitCodeFail:
                self.testfailed(testfilename, "test program returned exit code {}{}".format(exitcode, insteadOf))
                if self.args.verbose > 0:
                    self.print_tail("stdout", os.path.join(self.args.workdir, self.testname, outfname))
                    self.print_tail("stderr", os.path.join(self.args.workdir, self.testname, errfname))
                return;

        # execute post-run commands
        if (self.args.mode == 'run'):
            for key, value in  sorted(self.values.items()):
                if (key.startswith('postrun-command(')):
                    # execute file
                    runscript += value + "\n"
                    exitcode = self.exec_program(value, os.path.join(self.args.workdir, self.testname), key+".out", key+".err")
                    if (exitcode != 0):
                        self.testunresolved(testfilename, "post-run command \"{}\" returned nonzero exit code: {}".format(value, exitcode))
                        return;

        runfile = os.path.join(self.args.workdir, self.testname,"run")
        self.writefile(runfile, runscript)
        os.chmod(runfile, 0o755) # make it executable

        retestfile = os.path.join(self.args.workdir, self.testname,"retest")
        self.writefile(retestfile, "#! /bin/sh\ncd ../.. && ./runtest "+testfilename+"\n")
        os.chmod(retestfile, 0o755) # make it executable

        # check output files
        for key,value in self.values.items():
            if 'contains' in key:  # any form of "...contains..."
                # read file
                if (value == 'stdout'):
                    infname = outfname
                elif (value == 'stderr'):
                    infname = errfname
                else:
                    infname = value

                self.lprint(2, "  checking "+infname)

                try:
                    f = open(os.path.join(self.args.workdir, self.testname, infname), 'r')
                    txt = ''
                    for line in f:
                        txt += re.sub(r'[ \t]*[\r\n]+$', '', line) + "\n"
                    f.close()
                except (IOError, OSError) as e:
                    self.testunresolved(testfilename, "cannot read test case output file `{}: {}".format(infname, e))
                    return

                # do substitutions on it
                havesubst = False
                for key2,value2 in self.values.items():
                    if key2.startswith('subst'):
                        havesubst = True
                        rule = value2  # something like "/foo/bar/"
                        sep = rule[0:1]  # typically "/"
                        ruleSlices = rule.split(sep)
                        if len(ruleSlices) < 3:
                            self.testunresolved(testfilename, "wrong subst rule: syntax is /search-regex/replace-string/flags")
                            return
                        if len(ruleSlices) > 4:
                            self.testunresolved(testfilename, "wrong subst rule: too many occurrences of separator character '"+sep+"', choose another separator")

                        searchstring = ruleSlices[1]
                        replacement = ruleSlices[2]
                        replacement = re.sub(r'\$(\d)', r'\\\1', replacement)   # perl regex compatibility: perl was accept the '$<n>', python accepts only '\<n>'
                        flags = ruleSlices[3] if len(ruleSlices) > 3 else ''
                        if (not re.match(r'^[ism]*$', flags)):
                            self.testunresolved(testfilename, "wrong subst rule: invalid flags '"+flags+"': only 'i', 's' and 'm' supported ('g' is implicit)")
                            return

                        # do it.
                        #
                        # Note: this is wrong (does not recognize $1 or \1 in the replacement string): $txt =~ s/(?$flags)$searchstring/$replacement/g;
                        # XXX: the following solution does not like curly braces in the search or replacement strings...
                        # Note: g cannot be written as (?g)
                        if flags != '':
                            flags = '(?'+flags+')'
                        try:
                            txt = re.sub(flags+searchstring, replacement, txt)
                        except re.error as e:
                            self.testunresolved(testfilename, "%subst: wrong pattern `{}': {}".format(value, e))
                            return;
                realinfname = infname
                if havesubst:
                    # write out substitution result for debugging purposes
                    realinfname = infname+".subst"
                    self.writefile(os.path.join(self.args.workdir, self.testname, realinfname), txt)

                # get pattern
                pattern = self.bodies[key]
                pattern = pattern.strip()   # trim pattern
                pattern = re.sub(r'[ \t]$', '', pattern, flags=re.MULTILINE)      # remove trailer whitespaces from all lines

                self.writefile(os.path.join(self.args.workdir, self.testname,"test-"+key+".txt"), pattern)
                self.writefile(os.path.join(self.args.workdir, self.testname,"test-"+key+".txt2"), txt)

                # check contains or not-contains
                if 'contains-regex(' in key:
                    try:
                        match = re.search(pattern, txt, re.MULTILINE|re.DOTALL)
                        self.lprint(2, "%{} match: {}".format(key, match))
                    except re.error as e:
                        self.testunresolved(testfilename, "%subst: wrong pattern in `{}': {}".format(key, e))
                        return

                    if (key.startswith('contains-regex(') and not match):
                        self.testfailed(testfilename, "{} fails \%{} rule".format(self.values[key], key))
                        if (len(txt) <= 8192):
                            self.lprint(1, "expected pattern:\n>>>>{}<<<<\nactual output:\n>>>>{}<<<<\n".format(pattern, txt))
                        else:
                            self.lprint(1, "expected pattern:\n>>>>{}<<<<\nactual output too big to dump (>8K), see file `{}' in work directory\n".format(pattern, realinfname))
                        return
                    elif (key.startswith('not-contains-regex(') and match):
                        self.testfailed(testfilename, "{} fails \%{} rule".format(self.values[key], key))
                        if (len(txt) <= 8192):
                            self.lprint(1, "unexpected pattern:\n>>>>{}<<<<\nactual output:\n>>>>{}<<<<\n".format(pattern, txt))
                            self.lprint(1, "at line {}\n".format(txt.count("\n", 0, match.start())+1))
                        else:
                            self.lprint(1, "unexpected pattern:\n>>>>{}<<<<\nactual output too big to dump (>8K), see file `{}' in work directory\n".format(pattern, realinfname))
                            self.lprint(1, "at line {}\n".format(txt.count("\n", 0, match.start())+1))
                        return
                else:
                    match = txt.find(pattern)
                    self.lprint(2, "%{} match: {}".format(key, match))
                    if (key.startswith('contains(') and match == -1):
                        self.testfailed(testfilename, "{} fails \%{} rule".format(self.values[key], key))
                        if (len(txt) <= 8192):
                            self.lprint(1, "expected substring:\n>>>>{}<<<<\nactual output:\n>>>>{}<<<<\n".format(pattern, txt))
                        else:
                            self.lprint(1, "expected substring:\n>>>>{}<<<<\nactual output too big to dump (>8K), see file `{}' in work directory\n".format(pattern, realinfname))
                        return
                    elif (key.startswith('not-contains(') and match != -1):
                        self.testfailed(testfilename, "{} fails \%{} rule".format(self.values[key], key))
                        if (len(txt) <= 8192):
                            self.lprint(1, "unexpected substring:\n>>>>{}<<<<\nactual output:\n>>>>{}<<<<\n".format(pattern, txt))
                            self.lprint(1, "at line {}\n".format(txt.count("\n", 0, match)+1))
                        else:
                            self.lprint(1, "unexpected substring:\n>>>>{}<<<<\nactual output too big to dump (>8K), see file `{}' in work directory\n".format(pattern, realinfname))
                            self.lprint(1, "at line {}\n".format(txt.count("\n", 0, match)+1))
                        return

            elif (key.startswith('file-exists(')):
                if (not os.path.exists(os.path.join(self.args.workdir, self.testname,self.values[key]))):
                    self.testfailed(testfilename, "{} fails \%{} rule".format(self.values[key], key))
                    return
            elif (key.startswith('file-not-exists(')):
                if (os.path.exists(os.path.join(self.args.workdir, self.testname, self.values[key]))):
                    self.testfailed(testfilename, "{} fails \%{} rule".format(self.values[key], key))
                    return

        self.testpassed(testfilename)


    def run(self):
        self.createParser()
        self.args = self.parser.parse_args()
        self.lprint(2, self.args)

        # test existence of work directory
        if (not os.path.isdir(self.args.workdir)):
            fail('work directory '+self.args.workdir+' does not exist\n')

        # argument fixes
        if self.args.extraargs == None:
            self.args.extraargs = []

        # produce name of test program (only used for tests not containing '%testprog')
        if (self.args.testprogram == ''):
            tmp = os.path.basename(self.args.workdir)
            self.args.testprogram = os.path.join(".", tmp)

        # save environment variables (tests may overwrite them)
        self.saveOriginalEnv()

        #
        # generate test files
        #
        if (self.args.mode == 'gen'):
            print(self.progname + ": extracting files from *.test files into " + self.args.workdir + "...")

            self.define_templates()
            for testfilename in self.args.filenames:
                self.testcase_generatesources(testfilename)

        self.num_pass = 0
        self.num_fail = 0
        self.num_unresolved = 0

        #
        # run tests
        #
        if self.args.mode == 'run' or self.args.mode == 'check':
            if self.args.mode == 'run':
                print(progname+": running tests using "+self.args.testprogram+"...")
            if self.args.mode == 'check':
                print(progname+": checking existing output files...")

            self.reason = {}
            self.result = {}
            self.unresolved_tests = []
            self.failed_tests = []

            for testfilename in self.args.filenames:
                self.testcase_run(testfilename)

            print("========================================")
            print("PASS: {}   FAIL: {}   UNRESOLVED: {}\n".format(self.num_pass, self.num_fail, self.num_unresolved))

            if (self.num_fail > 0):
                self.lprint(1, "FAILED tests: " + ' '.join(self.failed_tests))
            if (self.num_unresolved > 0):
                self.lprint(1, "UNRESOLVED tests: " + ' '.join(self.unresolved_tests))

        return 0 if (self.num_fail == 0 and self.num_unresolved == 0) else 2


#####################################################
tool = OppTest()
exitcode = tool.run()

sys.exit(exitcode)
